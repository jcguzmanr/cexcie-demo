"use client";
import { useEffect, useState } from "react";
import { Modal } from "@/components/Modal";
import { Button } from "@/components/Button";
import { cx } from "@/lib/ui";
import { ThankYouModal } from "./ThankYouModal";
import { useTelemetryEvents } from "@/lib/useTelemetry";
import { processTelemetryForLead } from "@/lib/telemetry-processor";
import { Telemetry } from "@/lib/telemetry";
import { Carrera } from "@/data/schemas";

type Props = { 
  open: boolean; 
  onClose: () => void; 
  careerNames: string[];
  source?: "career" | "comparator";
  selectedCarreras?: Carrera[];
};

// Shape m√≠nima del JSON de comparador para evitar `any`
type ComparadorUI = { ui?: { cta?: { helper?: string; label?: string } } };

function validateEmail(value: string) {
  return /.+@.+\..+/.test(value);
}

function validatePhone(value: string) {
  // Acepta n√∫meros de 8 d√≠gitos o m√°s, con o sin c√≥digo de pa√≠s
  return /^\+?[\d\s\-\(\)]{8,}$/.test(value);
}

function Field({ label, value, onChange, type = "text", placeholder, error }: { label: string; value: string; onChange: (v: string) => void; type?: string; placeholder?: string; error?: string }) {
  return (
    <label className="grid gap-1">
      <span className="text-sm font-medium opacity-80">{label}</span>
      <input
        value={value}
        onChange={(e) => onChange(e.target.value)}
        type={type}
        placeholder={placeholder}
        className={cx("px-4 py-3 rounded-xl border bg-[var(--surface)] text-[var(--foreground)] border-[var(--border)]", error ? "border-red-500 focus-visible:ring-red-500/40" : undefined)}
      />
      {error && <span className="text-xs text-red-600">{error}</span>}
    </label>
  );
}

function SelectField({ label, value, onChange, options }: { label: string; value: string; onChange: (v: string) => void; options: { value: string; label: string }[] }) {
  return (
    <label className="grid gap-1">
      <span className="text-sm font-medium opacity-80">{label}</span>
      <select
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="px-4 py-3 rounded-xl border bg-[var(--surface)] text-[var(--foreground)] border-[var(--border)]"
      >
        {options.map((o) => (
          <option key={o.value} value={o.value}>{o.label}</option>
        ))}
      </select>
    </label>
  );
}

export function SendResultsModal({ 
  open, 
  onClose, 
  careerNames, 
  source = "career",
  selectedCarreras = []
}: Props) {
  const [name, setName] = useState("");
  const [dni, setDni] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [contactMethod, setContactMethod] = useState<"whatsapp" | "correo">("whatsapp");
  const [sent, setSent] = useState(false);
  const [errors, setErrors] = useState<{ name?: string; dni?: string; phone?: string; email?: string }>({});
  const [leadId, setLeadId] = useState<string>("");
  const [showThankYou, setShowThankYou] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [cta, setCta] = useState<{ helper?: string; label?: string } | null>(null);
  const { trackCustomEvent } = useTelemetryEvents();

  useEffect(() => {
    fetch("/data/comparador-data.json")
      .then((r) => r.json())
      .then((j: ComparadorUI) => setCta(j.ui?.cta ?? null))
      .catch(() => {});
  }, []);

  async function handleSend() {
    const next: { name?: string; dni?: string; phone?: string; email?: string } = {};
    if (name.trim().length < 2) next.name = "Ingresa tu nombre completo.";
    if (dni.trim().length < 8) next.dni = "Ingresa tu DNI (m√≠nimo 8 d√≠gitos).";
    if (!validatePhone(phone)) next.phone = "Ingresa un tel√©fono v√°lido (m√≠nimo 8 d√≠gitos).";
    if (!validateEmail(email)) next.email = "Ingresa un email v√°lido.";
    setErrors(next);
    
    if (Object.keys(next).length === 0) {
      setIsSubmitting(true);
      
      try {
        // Generar leadId √∫nico
        const newLeadId = `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        setLeadId(newLeadId);
        
        // Obtener session ID de telemetr√≠a
        const sessionId = Telemetry.sessionId;
        
        // Procesar datos de telemetr√≠a y selecciones en paralelo (OPTIMIZADO)
        const [telemetryResult, storeResult] = await Promise.allSettled([
          // Procesar telemetr√≠a
          (async () => {
            try {
              return processTelemetryForLead(sessionId);
            } catch (error) {
              console.warn('Error processing telemetry:', error);
              return { telemetry_events: [], program_selections: [] };
            }
          })(),
          
          // Obtener selecciones del store
          (async () => {
            try {
              const { useAppStore } = await import('@/store');
              const store = useAppStore.getState();
              return store;
            } catch (error) {
              console.warn('Error reading store:', error);
              return null;
            }
          })()
        ]);
        
        // Combinar resultados
        let telemetry_events = telemetryResult.status === 'fulfilled' ? telemetryResult.value.telemetry_events : [];
        let program_selections = telemetryResult.status === 'fulfilled' ? telemetryResult.value.program_selections : [];
        
        // Agregar selecciones actuales del store si est√°n disponibles
        if (storeResult.status === 'fulfilled' && storeResult.value) {
          const store = storeResult.value;
          if (store.selectedCarreras && store.selectedCarreras.length > 0) {
            console.log('üìã Carreras seleccionadas encontradas:', store.selectedCarreras.length);
            
            const currentSelections = store.selectedCarreras.map((carrera: any, index: number) => {
              const carreraData = store.carreraById[carrera.id];
              const facultadData = carreraData ? store.facultadById[carreraData.facultadId] : null;
              
              return {
                program_id: carrera.id,
                program_name: carrera.nombre,
                program_type: 'career',
                department_id: carreraData?.facultadId || null,
                department_name: facultadData?.nombre || null,
                selection_source: 'programs_list',
                selection_order: index + 1
              };
            });
            
            program_selections = [...program_selections, ...currentSelections];
            console.log('‚úÖ Selecciones finales preparadas:', program_selections.length);
          } else {
            console.log('‚ö†Ô∏è No hay carreras seleccionadas en el store');
          }
        }
        
        // Preparar datos para enviar
        const leadData = {
          nombre_completo: name.trim(),
          dni: dni.trim(),
          telefono: phone.trim(),
          email: email.trim(),
          metodo_contacto: contactMethod,
          session_id: sessionId,
          lead_id: newLeadId,
          source,
          institution_type: 'university',
          telemetry_events,
          program_selections
        };
        
        // Log para debugging
        console.log('üì§ Enviando lead data:', {
          lead_id: newLeadId,
          session_id: sessionId,
          telemetry_events_count: telemetry_events.length,
          program_selections_count: program_selections.length,
          program_selections: program_selections
        });
        
        // Optimizaci√≥n: Enviar a la API con timeout y retry
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout
        
        try {
          const response = await fetch('http://localhost:3000/api/leads', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(leadData),
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
        
        const result = await response.json();
        
        if (result.success) {
          // Track lead submission exitoso
          trackCustomEvent("lead_submitted", {
            source,
            leadId: newLeadId,
            contactMethod,
            careerCount: careerNames.length,
            dni: dni.trim(),
            telemetryEventsSaved: telemetry_events.length,
            programSelectionsSaved: program_selections.length
          });
          
          setSent(true);
          setShowThankYou(true);
        } else {
          // Manejar error de API
          console.error('Error saving lead:', result);
          trackCustomEvent("lead_submission_error", {
            source,
            leadId: newLeadId,
            error: result.error,
            message: result.message
          });
          
          // Mostrar error al usuario
          setErrors({ 
            name: 'Error al guardar los datos. Por favor intenta nuevamente.' 
          });
        }
      } catch (error) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
          console.error('‚ùå Timeout: La operaci√≥n tard√≥ demasiado');
          setErrors({ 
            name: 'La operaci√≥n tard√≥ demasiado tiempo. Por favor intenta nuevamente.' 
          });
          trackCustomEvent("lead_submission_error", {
            source,
            error: 'timeout_error',
            message: 'Timeout en la operaci√≥n'
          });
        } else {
          console.error('Error submitting lead:', error);
          trackCustomEvent("lead_submission_error", {
            source,
            error: 'network_error',
            message: error instanceof Error ? error.message : 'Error de conexi√≥n'
          });
          
          setErrors({ 
            name: 'Error de conexi√≥n. Por favor verifica tu internet e intenta nuevamente.' 
          });
        }
      } finally {
        setIsSubmitting(false);
      }

  const handleThankYouClose = () => {
    setShowThankYou(false);
    setSent(false);
    onClose();
  };

  // Si ya se envi√≥ y se debe mostrar el ThankYou, mostrar ese modal
  if (showThankYou) {
    return (
      <ThankYouModal
        open={showThankYou}
        onClose={handleThankYouClose}
        careerNames={careerNames}
        source={source}
        leadId={leadId}
        selectedCarreras={selectedCarreras}
      />
    );
  }

  return (
    <Modal open={open} onClose={onClose} title="Enviar resultados">
      {sent ? (
        <div className="grid gap-4">
          <div className="flex items-center gap-3">
            <div className="inline-flex items-center justify-center w-10 h-10 rounded-full bg-green-100 text-green-700">‚úì</div>
            <div>
              <div className="font-semibold">¬°Gracias! Hemos enviado tus resultados</div>
              <div className="text-sm opacity-80">Pronto nos pondremos en contacto contigo para resolver tus dudas y acompa√±arte en el proceso de admisi√≥n.</div>
            </div>
          </div>
          <div className="text-sm opacity-80">
            {contactMethod === "correo" ? (
              <>Se enviar√° un resumen a <strong>{email}</strong>.</>
            ) : (
              <>Te contactaremos por WhatsApp al <strong>{phone}</strong>.</>
            )}
          </div>
          <div className="text-sm opacity-70">
            DNI registrado: <strong>{dni}</strong>
          </div>
          <div className="flex justify-end">
            <Button onClick={onClose}>Cerrar</Button>
          </div>
        </div>
      ) : (
        <div className="grid gap-4">
          <div className="text-center mb-4">
            <div className="text-2xl font-semibold mb-2">Informaci√≥n de contacto</div>
            <div className="opacity-70">
              {cta?.helper || "Completa tus datos para recibir informaci√≥n detallada"}
            </div>
          </div>

          <Field
            label="Nombre completo"
            value={name}
            onChange={setName}
            placeholder="Tu nombre completo"
            error={errors.name}
          />

          <Field
            label="DNI"
            value={dni}
            onChange={setDni}
            placeholder="12345678"
            error={errors.dni}
          />

          <Field
            label="Tel√©fono"
            value={phone}
            onChange={setPhone}
            type="tel"
            placeholder="+51 999 999 999"
            error={errors.phone}
          />

          <Field
            label="Email"
            value={email}
            onChange={setEmail}
            type="email"
            placeholder="tu@email.com"
            error={errors.email}
          />

          <SelectField
            label="M√©todo de contacto preferido"
            value={contactMethod}
            onChange={(v) => setContactMethod(v as "whatsapp" | "correo")}
            options={[
              { value: "whatsapp", label: "WhatsApp" },
              { value: "correo", label: "Correo electr√≥nico" }
            ]}
          />

          <div className="flex gap-3 pt-4">
            <Button variant="secondary" onClick={onClose} className="flex-1">
              Cancelar
            </Button>
            <Button 
              onClick={handleSend} 
              className="flex-1"
              disabled={isSubmitting}
            >
              {isSubmitting ? "Enviando..." : (cta?.label || "Enviar")}
            </Button>
          </div>
        </div>
      )}
    </Modal>
  );
}


